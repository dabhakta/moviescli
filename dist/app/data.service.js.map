{"version":3,"file":"data.service.js","sourceRoot":"","sources":["file:///D:/angularprojects/moviescli/tmp/broccoli_type_script_compiler-input_base_path-G90dHBuf.tmp/0/src/app/data.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAqB,eAAe,CAAC,CAAA;AAKrC;IAME,qBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAJ9B,WAAM,GAAG,EAAE,CAAC;QAKV,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,6BAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,mCAAa,GAAb,UAAc,EAAU;QACtB,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC;IAED,+BAAS,GAAT;QAAA,iBAIC;QAHC,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,UAAC,QAAQ;YACtD,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAA;QAClC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,mCAAa,GAAb;QACE,MAAM,CAAA;IACR,CAAC;IAED,kCAAY,GAAZ,UAAa,EAAU,EAAE,MAAc,EAAE,IAAY;QACnD,EAAE,EAAE,CAAC;QACL,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAA;IACxE,CAAC;IAED,+BAAS,GAAT,UAAU,EAAU,EAAE,MAAc,EAAE,IAAY;QAChD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,EAAE,EAAE,CAAC;QAEL,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAA;IACxF,CAAC;IAED,4BAAM,GAAN,UAAO,KAAK;QACV,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEjD,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAA,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClE,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED,8BAAQ,GAAR,UAAS,EAAU;QACjB,EAAE,EAAE,CAAC;QACL,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7C,CAAC;IAtDH;QAAC,iBAAU,EAAE;;mBAAA;IAwDb,kBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,mBAAW,cAuDvB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\ndeclare var firebase: any;\n\n@Injectable()\nexport class DataService {\n\n  movies = [];\n  idnew: number;\n  movie: any;\n\n  constructor(private http: Http) { \n    this.fbGetData();\n  }\n\n  getData(){\n    return this.movies;\n  }\n\n  getsingleData(id: number){\n    this.getData();\n    return this.movies[id];\n  }\n\n  fbGetData(){\n    firebase.database().ref('/').on('child_added', (snapshot) => {\n      this.movies.push(snapshot.val())\n    })\n  }\n\n  fbGetLastData(){\n    return \n  }\n\n  fbUpdateData(id: number, mtitle: string, year: number){\n    id--;\n    firebase.database().ref('/' + id).update({mtitle: mtitle, year: year})\n  }\n\n  fbAddData(id: number, mtitle: string, year: number){\n    this.idnew = id;\n    id--;\n\n    firebase.database().ref('/' + id).update({id: this.idnew, mtitle: mtitle, year: year})\n  }\n\n  delete(movie){\n    this.movie = this.movies[this.movies.length - 1];\n\n    if(this.movie.id !== movie.id){\n      this.fbUpdateData(movie.id, this.movie.mtitle, this.movie.year);\n    }\n    this.fbDelete(this.movie.id);\n  }\n\n  fbDelete(id: number){\n    id--;\n    firebase.database().ref('/' + id).remove();\n  }\n\n}"]}